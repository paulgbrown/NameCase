using PgbNameCase;

namespace UnitTests.NameCaseFormatterShould;

public class GivenAMacName
{
	[Theory]
	[InlineData("Macaluso")]
	[InlineData("Macaraeg")]
	[InlineData("Macari")]
	[InlineData("Macario")]
	[InlineData("Maccarone")]
	[InlineData("Macchi")]
	[InlineData("Macchia")]
	[InlineData("Macchio")]
	[InlineData("Macchione")]
	[InlineData("Maccini")]
	[InlineData("Macedo")]
	[InlineData("Macera")]
	[InlineData("Macey")]
	[InlineData("Macevicius")]
	[InlineData("Machac")]
	[InlineData("Machacek")]
	[InlineData("Machado")]
	[InlineData("Machak")]
	[InlineData("Machala")]
	[InlineData("Machamer")]
	[InlineData("Machan")]
	[InlineData("Machar")]
	[InlineData("Machart")]
	[InlineData("Machemer")]
	[InlineData("Machen")]
	[InlineData("Macher")]
	[InlineData("Machia")]
	[InlineData("Machida")]
	[InlineData("Machin")]
	[InlineData("Machlin")]
	[InlineData("Machnicki")]
	[InlineData("Machnik")]
	[InlineData("Machon")]
	[InlineData("Machovec")]
	[InlineData("Machowski")]
	[InlineData("Machuca")]
	[InlineData("Machuga")]
	[InlineData("Maciag")]
	[InlineData("Macias")]
	[InlineData("Maciej")]
	[InlineData("Maciejewski")]
	[InlineData("Maciel")]
	[InlineData("Macina")]
	[InlineData("Macioce")]
	[InlineData("Maciolek")]
	[InlineData("Maciulis")]
	[InlineData("Mack")]
	[InlineData("Mackall")]
	[InlineData("Mackel")]
	[InlineData("Mackell")]
	[InlineData("Macken")]
	[InlineData("Mackenthun")]
	[InlineData("Macker")]
	[InlineData("Mackert")]
	[InlineData("Mackes")]
	[InlineData("Mackey")]
	[InlineData("Mackie")]
	[InlineData("Mackiewicz")]
	[InlineData("Mackin")]
	[InlineData("Mackintosh")]
	[InlineData("Mackle")]
	[InlineData("Macklem")]
	[InlineData("Mackler")]
	[InlineData("Mackley")]
	[InlineData("Macklin")]
	[InlineData("Mackowiak")]
	[InlineData("Mackowski")]
	[InlineData("Mackrell")]
	[InlineData("Maclin")]
	[InlineData("Macomb")]
	[InlineData("Macomber")]
	[InlineData("Macquarie")]
	[InlineData("Macrina")]
	[InlineData("Macris")]
	[InlineData("Macumber")]
	[InlineData("Maczko")]
	[InlineData("Maczynski")]
	[InlineData("Macy")]
	[InlineData("MacConnell")]
	[InlineData("MacCormack")]
	[InlineData("MacDermott")]
	[InlineData("MacDonald")]
	[InlineData("MacDonnell")]
	[InlineData("MacDougal")]
	[InlineData("MacDowell")]
	[InlineData("MacDuff")]
	[InlineData("MacFarlane")]
	[InlineData("MacGill")]
	[InlineData("MacGrath")]
	[InlineData("MacGregor")]
	[InlineData("MacGuire")]
	[InlineData("MacHale")]
	[InlineData("MacInnes")]
	[InlineData("MacIntosh")]
	[InlineData("MacIntyre")]
	[InlineData("MacKay")]
	[InlineData("MacKnight")]
	[InlineData("MacLachlan")]
	[InlineData("MacLaren")]
	[InlineData("MacLaughlin")]
	[InlineData("MacLeod")]
	public void CorrectlyFormatAName(string expectedName)
	{
		var nameToBeFormatted = expectedName.ToLower();

		var actualName = NameCaseFormatter.Format(nameToBeFormatted);

		Assert.Equal(expectedName, actualName);
	}
}
